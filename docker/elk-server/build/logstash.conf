######### Input #########
input {
  file {
    path => "/Users/sebastienmuller/comperio/projects/DIFI/projects/dcat-harvester/docker/logs/dcat-harvester.log"
    start_position => "beginning"
    # setting sincedb_path to /dev/null will ensure we always parse logs fresh every time - useful for testing
    # sincedb_path => "/dev/null"
  }
  file {
    path => "/Users/sebastienmuller/comperio/projects/DIFI/projects/dcat-harvester/docker/logs/dcat-admin.log"
    start_position => "beginning"
    # setting sincedb_path to /dev/null will ensure we always parse logs fresh every time - useful for testing
    # sincedb_path => "/dev/null"
  }
}
######### Input #########

######### Filter #########
filter {
  # Extract event severity, timestamp and logevent type
  grok {
    match => { "message" => "%{DATESTAMP:timestamp} %{WORD:severity}.+?([a-zA-Z]+\.)+.+?- \[%{WORD:logger}\] %{GREEDYDATA:rawContent}" }
      tag_on_failure => []
  }

  ######### crawler_admin logger for adding/deleting crawlers #########
  if "crawler_admin" in [logger] {
    mutate {
      add_field => {
        "eventType" => "%{logger}"
        "index" => "true"
      }
    }
    grok {
      match => { "rawContent" => "%{WORD:action}.+?: %{GREEDYDATA:content}" }
      tag_on_failure => []
    }
    kv {
      source => "content"
      field_split => ", "
      value_split => "="
      }
    mutate {
      remove_field => [ "content, rawContent, logger" ]
    }
  }
  ######### crawler_admin logger for adding/deleting crawlers #########

  ######### user_admin logger for adding/deleting users #########
  if "user_admin" in [logger] {
    mutate {
      add_field => {
        "eventType" => "%{logger}"
        "index" => "true"
      }
    }
    grok {
      match => { "rawContent" => "%{WORD:action}.+?: %{GREEDYDATA:content}" }
      tag_on_failure => []
    }
    kv {
      source => "content"
      field_split => ", "
      value_split => "="
    }
    mutate {
      remove_field => [ "content, rawContent, logger" ]
    }
  }
  ######### user_admin logger for adding/deleting users #########

  ######### crawler_operations logger for start/end crawlers #########
  if "crawler_operations" in [logger] {
    mutate {
      add_field => {
        "eventType" => "%{logger}"
        "index" => "true"
      }
    }
    grok {
      match => { "rawContent" => "%{WORD:action}.+?: %{GREEDYDATA:content}" }
      tag_on_failure => []
    }
    kv {
      source => "content"
      field_split => ", "
      value_split => "="
    }
    mutate {
      remove_field => [ "content, rawContent, logger" ]
    }

  }
  ######### crawler_operations logger for start/end crawlers #########

}
######### Filter #########

######### Output #########
output {
  if "true" in [index] {
    # Send to console - useful for testing
    # stdout {
    #  codec => rubydebug
    # }

    # Send directly to local Elasticsearch
    elasticsearch {
      # TODO: create template
      # template => ""
      index => "difi-%{+YYYY.MM.dd}"
      # template_overwrite => true
    }
  }
}
######### Output #########
